package com.yaplab.user;

import com.yaplab.security.authentication.LoginResponseDTO;
import com.yaplab.security.authentication.RegisterRequestDTO;
import com.yaplab.security.authentication.RegisterResponseDTO;
import org.springframework.stereotype.Service;

/**
 * A mapper class to convert objects from one type to another.
 * Separates conversion logic from the main business logic and reduces redundancy.
 */
@Service
public class UserMapper {

    /**
     * Converts a DTO to an Entity
     * @param userDTO The userDTO object
     * @return The user entity/object
     */
    public User toEntityFromDTO(UserDTO userDTO){
        if (userDTO == null) {
            return null;
        }
        User user = new User();
        user.setId(userDTO.id());
        user.setUserName(userDTO.userName());
        user.setEmailId(userDTO.emailId());
        user.setMobileNumber(userDTO.mobileNumber());
        user.setPassword(userDTO.password());
        return user;
    }

    /**
     * Converts an entity to a responseDTO.
     * @param user The user object
     * @return The response object
     */
    public UserResponseDTO toResponseDTO(User user){
        if (user == null) {
            return null;
        }
        return new UserResponseDTO(
                user.getId(),
                user.getUserName(),
                user.getEmailId(),
                user.getMobileNumber(),
                user.getStatus(),
                user.getProfilePictureUrl()
        );
    }

    /**
     * Converts an entity to a login response with a token.
     * @param user The user entity
     * @param accessToken The JWT generated by the server
     * @param refreshToken The refresh
     * @return The login response object
     */
    public LoginResponseDTO toLoginResponseDTO(User user, String accessToken, String refreshToken){
        if (user == null) {
            return null;
        }
        return new LoginResponseDTO(
                user.getId(),
                user.getUserName(),
                user.getEmailId(),
                user.getMobileNumber(),
                user.getStatus(),
                accessToken,
                refreshToken,
                user.getProfilePictureUrl());
    }

    /**
     * Creates a user entity based on the register request received.
     * @param registerRequestDTO An DTO of type registerRequest
     * @return The user entity
     */
    public User toEntityFromRegisterRequest(RegisterRequestDTO registerRequestDTO){
        if (registerRequestDTO == null) {
            return null;
        }
        User user = new User();
        user.setUserName(registerRequestDTO.userName());
        user.setEmailId(registerRequestDTO.emailId());
        user.setMobileNumber(registerRequestDTO.mobileNumber());
        user.setPassword(registerRequestDTO.password());
        return user;
    }

    /**
     * Creates a register response object from the user entity
     * @param user the entity object of the user
     * @return the registerResponseDTO
     */
    public RegisterResponseDTO toRegisterResponseDTO(User user){
        if (user == null) {
            return null;
        }
        return new RegisterResponseDTO(
                user.getId(),
                user.getUserName(),
                user.getEmailId(),
                user.getMobileNumber(),
                user.getStatus()
        );
    }
}
